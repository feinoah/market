<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:flex="http://www.springframework.org/schema/flex"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- For DataSource settings and future properties files -->

	<bean id="configBean"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resources/dataSource.properties" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${dataSource.url}" />
	    <property name="username" value="${dataSource.username}" />
	    <property name="password" value="${dataSource.password}" />

	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="15" />

	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />

	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />

	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />

	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />

	    <!-- 配置监控统计拦截的filters  -->
		<!--
	    <property name="filters" value="wall,stat,slf4j" /> 
		-->
		<property name="filters" value="wall" /> 
		
	</bean>

	<!-- DAO -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<context:annotation-config />
	<context:component-scan base-package="cn.com.carit.market.dao.*" />


	<!-- 定义事务处理类，不同的数据访问方式，事务处理类不同 比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 声明使用注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:component-scan base-package="cn.com.carit.market.service.*" />

	<bean name="quartzJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="cn.com.carit.market.job.ApplicationUpdatedJob" />
		<!-- 接受一个Map,其中包含了需要设置给jobClass的各种属性 -->
		<property name="jobDataAsMap">
			<map></map>
		</property>
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="quartzJob" />
		<!-- 每天凌晨三点执行 -->
		<property name="cronExpression" value="0 0 3 * * ?"/>
	</bean>
	<bean id="SpringJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>

</beans>