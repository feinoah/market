<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Scans the classpath of this application for @Components to deploy as beans -->
	<context:component-scan base-package="cn.com.carit.market.web.controller" />

	<!-- Forwards requests to the "/" resource to the "welcome" view -->
	<mvc:view-controller path="/" view-name="index"/>
	<mvc:view-controller path="/loginForm" view-name="loginForm"/>
	<mvc:view-controller path="/location_map" view-name="location-map"/>

	<!-- 启用基于注解的处理器映射，添加拦截器，类级别的处理器映射 -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">  
        <property name="interceptors">  
            <list>  
               	<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
				<bean class="cn.com.carit.market.web.interseptor.AdminInterceptor"/>
				<bean class="cn.com.carit.market.web.interseptor.PersonCenterInterceptor"/>
            </list>  
        </property>  
    </bean>  
    <!--   
  	  配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射，  
  	  有人说该bean要放在context:component-scan前面，要不然不起作用，但我试的放后面也可以啊。  
  	  配置SpringMVC @ResponseBody和@RequestBody注解
    -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="cacheSeconds" value="0" />  
        <property name="webBindingInitializer">  
            <bean class="cn.com.carit.market.web.interseptor.BindingInitializer" />  
        </property>
        <property name="messageConverters">  
	        <list>  
	            <ref bean="jsonHttpMessageConverter" />  
	        </list>  
    	</property>
    </bean>
  
	<bean id="jsonHttpMessageConverter"  
	    class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
	</bean>  

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	<!-- 允许直接访问配置文件 -->
	<mvc:resources mapping="/*.properties" location="/" />

	<!-- Saves a locale change using a cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />

	<!-- Application Message Bundle -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:resources/messages/messages" />
		<property name="defaultEncoding" value="UTF-8" />
		<!--① 刷新资源文件的周期，以秒为单位 -->
		<property name="cacheSeconds" value="3600" />
	</bean>

	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 解析request的编码 ，Default is ISO-8859-1 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
		<!-- 35M -->
		<property name="maxUploadSize" value="36700160" />
		<!--被允许的最大的内存的大小，Default is 10240 bytes -->
		<property name="maxInMemorySize" value="20480" />
		<!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
		<property name="resolveLazily" value="true" />
	</bean>

</beans>